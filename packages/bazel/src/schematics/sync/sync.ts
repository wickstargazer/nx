import {
  apply,
  chain,
  MergeStrategy,
  mergeWith,
  move,
  Rule,
  schematic,
  Source,
  template,
  Tree,
  url
} from '@angular-devkit/schematics';
import {
  getProjectGraphFromHost,
  readJsonInTree,
  ProjectGraph,
  ProjectGraphNode
} from '@nrwl/workspace';
import { join, normalize } from '@angular-devkit/core';

function createBuildFile(
  project: ProjectGraphNode,
  projectGraph: ProjectGraph
): Source {
  return apply(url('./files/build-file'), [
    template({
      tmpl: '',
      project,
      projectGraph,
      dependencies: projectGraph.dependencies[project.name]
        ? projectGraph.dependencies[project.name].map(
            dep => `//${projectGraph.nodes[dep.target].data.root}:${dep.target}`
          )
        : []
    })
  ]);
}

function updateBuildFile(
  project: ProjectGraphNode,
  projectGraph: ProjectGraph
): Rule {
  return (host, context) => {
    const buildFile = createBuildFile(project, projectGraph);
    const buildFilePath = join(normalize(project.data.root), 'BUILD.bazel');

    return mergeWith(
      apply(buildFile, [
        sourceHost => {
          if (host.exists(buildFilePath)) {
            const contents = sourceHost.read('BUILD.bazel').toString();
            const customPart = host
              .read(buildFilePath)
              .toString()
              .split('# ==== Generated by Nx')[0];
            host.delete(buildFilePath);
            sourceHost.overwrite('BUILD.bazel', customPart + contents);
          }
        },
        move(project.data.root)
      ]),
      MergeStrategy.Overwrite
    );
  };
}

function createWorkspaceFile() {
  return host => {
    return mergeWith(
      apply(url('./files/workspace-file'), [
        template({
          tmpl: '',
          name: readJsonInTree(host, '/package.json').name.replace('-', '_')
        }),
        () => {
          if (host.exists('WORKSPACE')) {
            host.delete('WORKSPACE');
          }
        }
      ]),
      MergeStrategy.Overwrite
    );
  };
}

const ignoredFromRootBuildFile = ['WORKSPACE', '.bazelrc', 'BUILD.bazel'];

function createRootBuildFile() {
  return host => {
    return mergeWith(
      apply(url('./files/root-build-file'), [
        template({
          tmpl: '',
          rootFiles: host
            .getDir('/')
            .subfiles.filter(f => !ignoredFromRootBuildFile.includes(f))
        }),
        () => {
          if (host.exists('BUILD.bazel')) {
            host.delete('BUILD.bazel');
          }
        }
      ]),
      MergeStrategy.Overwrite
    );
  };
}

const runInit = schematic<{}>('init', {});

export default (): Rule => {
  return (host: Tree) => {
    const projectGraph = getProjectGraphFromHost(host);

    return chain([
      runInit,
      createWorkspaceFile(),
      createRootBuildFile(),
      ...Object.values(projectGraph.nodes).map(project =>
        updateBuildFile(project, projectGraph)
      )
    ]);
  };
};
